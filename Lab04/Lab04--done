#include "STM32L1xx.h"

int count = 0;
int count2 = 0;
int x = 1;      //determines if the second counter will increment (happens once ever other time counter one increment)
int button=0;  		   //state of buttons (0 after Static I/O button is pressed, 1 after on-board button is pressed)


//set counter 1's LEDs
int led1 = 0; //state of LED1
int led2 = 0; //state of LED2
int led3 = 0; //state of LED3
int led4 = 0; //state of LED4

//set counter 2's LEDs
int led21 = 0; //state of LED1
int led22 = 0; //state of LED2
int led23 = 0; //state of LED3
int led24 = 0; //state of LED4

/*----------------------------------------------------------*/
/* Pin setup - initialize GPIO pins used in program */
/* PA1 - Switch 1 connected to DIO0 on the EEBoard */
/* PA2 - Switch 2 connected to DIO1 on the EEBoard */
/*----------------------------------------------------------*/

void PinSetup(){
/*Configure PC() as output pins for LEDS*/
RCC->AHBENR     |= 0x04;             /*Enable GPIOC clock*/
GPIOC->MODER    &= (0xFFFFFF00);    /*Clear Pins 0-3 to be set as output*/
GPIOC->MODER    |= (0x00000055);    /*Sets Pins 0-3 in output mode*/
GPIOC->OSPEEDR  &= (0xFFFFFF00);    /*Clear Pins 0-3 for speed setting*/
GPIOC->OSPEEDR  |= (0x000000FF);    /*Set Speed to 40MHz (high speed)*/
GPIOC->PUPDR    &= (0xFFFFFF00);    /*No pull-up, pull-down*/

//PC pins 4-7 for use with LEDS for second counter
GPIOC->MODER    &= (0xFFFF00FF);    //Clears Pins 4-7 to be set as output
GPIOC->MODER    |= (0x00005500);    //Sets Pins 4-7 in output mode
GPIOC->OSPEEDR  &= (0xFFFF00FF);    //Clear Pins 0-3 for speed setting
GPIOC->OSPEEDR  |= (0x0000FF00);    //Set Speed to 40MHz (high speed)
GPIOC->PUPDR     &= (0xFFFF00FF);    //No pull-up, pull down

//PC pins 8 and 9 for on-board LEDs indicating interrupts
GPIOC->MODER    &= (0xFFF0FFFF);    //Clears Pins 8 and 9 to be set as outputs
GPIOC->MODER    |= (0x00050000);    //Sets Pins 8 and 9 in output mode
GPIOC->OSPEEDR  &= (0xFFF0FFFF);    //Clears pins for speed settings
GPIOC->OSPEEDR  |= (0x000F0000);    //Set Speed to 40MHz (high speed)
GPIOC->PUPDR    &= (0xFFF0FFFF);    //No pull-up, pull-down

/*Configure PA() as input pins for interrupts*/
RCC->AHBENR     |= 0x01;             /*Enable GPIOA clock*/
GPIOA->MODER    &= (0xFFFFFFF0);    /*Clears Pins 0 and 1 as inputs*/
GPIOA->OSPEEDR  &= (0xFFFFFFF0);    /*Clears Pins 0 and 1 for speed settings*/
GPIOA->OSPEEDR  |= (0x0000000F);    /*Set Speed to 40MHz (high speed)*/
GPIOC->PUPDR    &= (0xFFFFFFF0);    /*No pull-up, pull-down*/

//Setup of PA0 and PA1 as interrupts
SYSCFG->EXTICR[0] &= 0xFFF0;         //clear bits for EXTI0
SYSCFG->EXTICR[0] |= 0x0000;         //set EXTI0 = 0 to select PA0
SYSCFG->EXTICR[0] &= 0xFF0F;         //clear bits for EXTI1
SYSCFG->EXTICR[0] |= 0x0000;         //set EXTI1 = 0 to select PA1
EXTI-> RTSR       |= 0x0000;         //Set EXTI0 as rising edge triggered
EXTI-> IMR         = 0x0000;         //Enable EXTIO
EXTI-> PR         |= 0x0000;         //Clear EXTI0 pending status
EXTI-> RTSR       |= 0x0001;         //Set EXTI1 as rising edge triggered
EXTI-> IMR         = 0x0001;         //Enable EXTI1
EXTI-> PR         |= 0x0001;         //Clear EXTI1 pending status
NVIC_ClearPendingIRQ(6);								 //Clear NVIC pending status
NVIC_ClearPendingIRQ(7);									//Clear NVIC pending status
NVIC_EnableIRQ(6);          					//Enable external interrupt 0
NVIC_EnableIRQ(7);          					//Enable external interrupt 1
}



/*----------------------------------------------------------*/
/* Delay function - 0.5 second delay */
/*----------------------------------------------------------*/
void delay ()
{
 int a,b;
 for (a=0; a<100; a++) { //outer loop
 for (b=0; b<12000; b++) { //inner loop
 }
 }
}


/*----------------------------------------------------------*/
/*EXTI0 Inturrupt */
/*----------------------------------------------------------*/
void EXTI0_IRQHandler () {
    button = 1;                          //sets the direction of the second counter

    //int PA0State = GPIOA->IDR & 0x01; //read GPIOA and mask all but bit 0
    //do
//{GPIOA->BSRRL = 0x100;
//}        //as long as PA0 is pressed, PA8 (LED) will be lit
  //		while
    //	(PA0State == 1);

  GPIOC->BSRRL = 0x100;									 //turn PA8 on
    delay();														 //keep PA8 on for .5 seconds
  GPIOC->BSRRH = 0x100;								   //turn PA8 off
    EXTI-> PR         |= 0x0000;         //Clear EXTI0 pending status
  NVIC_ClearPendingIRQ(6);								 //Clear NVIC pending status
  }


  /*----------------------------------------------------------*/
  /*EXTI1 Inturrupt */
  /*----------------------------------------------------------*/
  void EXTI1_IRQHandler () {
      button = 0;                           //sets the direction of the second counter

  //	  int PA1State = GPIOA->IDR & 0x02; //read GPIOA and mask all but bit 0
//    do
//{GPIOA->BSRRL = 0x200;
//}        //as long as PA0 is pressed, PA8 (LED) will be lit
  //		while
  //		(PA1State == 1);

  GPIOC->BSRRL = 0x200;									 			//turn PA9 on
    delay();											  				 //keep PA9 on for .5 seconds
  GPIOC->BSRRH = 0x200;							  		   //turn PA9 off
      EXTI-> PR         |= 0x0001;           //Clear EXTI1 pending status
    NVIC_ClearPendingIRQ(7);									//Clear NVIC pending status
    }



/*----------------------------------------------------------*/
/* set the states of corresponding LEDs based on a integer from 0 to 9 */
/*----------------------------------------------------------*/
void actLEDs1(int n, int l1, int l2, int l3, int l4)
{
  if (n == 0)
  {
    l1 = 0;
    l2 = 0;
    l3 = 0;
    l4 = 0;
  }
  else if (n == 1)
  {
    l1 = 1;
    l2 = 0;
    l3 = 0;
    l4 = 0;
  }
  else if (n == 2)
  {
    l1 = 0;
    l2 = 1;
    l3 = 0;
    l4 = 0;
  }
  else if (n == 3)
  {
    l1 = 1;
    l2 = 1;
    l3 = 0;
    l4 = 0;
  }
  else if (n == 4)
  {
    l1 = 0;
    l2 = 0;
    l3 = 1;
    l4 = 0;
  }
  else if (n == 5)
  {
    l1 = 1;
    l2 = 0;
    l3 = 1;
    l4 = 0;
  }
  else if (n == 6)
  {
    l1 = 0;
    l2 = 1;
    l3 = 1;
    l4 = 0;
  }
  else if (n == 7)
  {
    l1 = 1;
    l2 = 1;
    l3 = 1;
    l4 = 0;
  }
  else if (n == 8)
  {
    l1 = 0;
    l2 = 0;
    l3 = 0;
    l4 = 1;
  }
  else if (n == 9)
  {
    l1 = 1;
    l2 = 0;
    l3 = 0;
    l4 = 1;
  }

  led1 = l1;
  led2 = l2;
  led3 = l3;
  led4 = l4;
}

/*----------------------------------------------------------*/
/* set the states of corresponding LEDs in counter 2 based on 9-n*/
/*----------------------------------------------------------*/
void actLEDs2(int n, int l21, int l22, int l23, int l24)
{
  if (n == 0)
  {
    l21 = 0;
    l22 = 0;
    l23 = 0;
    l24 = 0;
  }
  else if (n == 1)
  {
    l21 = 1;
    l22 = 0;
    l23 = 0;
    l24 = 0;
  }
  else if (n == 2)
  {
    l21 = 0;
    l22 = 1;
    l23 = 0;
    l24 = 0;
  }
  else if (n == 3)
  {
    l21 = 1;
    l22 = 1;
    l23 = 0;
    l24 = 0;
  }
  else if (n == 4)
  {
    l21 = 0;
    l22 = 0;
    l23 = 1;
    l24 = 0;
  }
  else if (n == 5)
  {
    l21 = 1;
    l22 = 0;
    l23 = 1;
    l24 = 0;
  }
  else if (n == 6)
  {
    l21 = 0;
    l22 = 1;
    l23 = 1;
    l24 = 0;
  }
  else if (n == 7)
  {
    l21 = 1;
    l22 = 1;
    l23 = 1;
    l24 = 0;
  }
  else if (n == 8)
  {
    l21 = 0;
    l22 = 0;
    l23 = 0;
    l24 = 1;
  }
  else if (n == 9)
  {
    l21 = 1;
    l22 = 0;
    l23 = 0;
    l24 = 1;
  }

  led21 = l21;
  led22 = l22;
  led23 = l23;
  led24 = l24;
}


/*----------------------------------------------------------*/
/* counting1 function - reversible decade counter with LED display */
/*----------------------------------------------------------*/
void counting1 (int n, int m, int button, int l1, int l2, int l3, int l4)
{
  if (n >= 9)
    n = 0; //if count=9 roll over to 0
  else
    n++; //increment counter by one

  actLEDs1(n, l1, l2, l3, l4); //set states for LEDs on first counter

  if (x==0)
  {
    x = 1;
  }
  else
  {
    x = 0;

  if (button == 0) //count up
  {
    if (m >= 9)
      m = 0; //if count=9 roll over to 0
    else
      m++; //increment counter by one
  }
  else //count down
  {
    if (m <= 0)
      m = 9; //if count=0 roll over to 9
    else
      m--; //decrement counter by one
  }

    actLEDs2(m, led21, led22, led23, led24); //set states for LEDs on second counter
  }

  count = n;
  count2 = m;
}


/*----------------------------------------------------------*/
/* Main program */
/*----------------------------------------------------------*/
int main(void)
{
 // int  EXTI0_IRQn = 6;      //external interrupt 0 set to PA0 (physical button)
 // int  EXTI1_IRQn = 7;      //external interrupt 1 set to PA1 (waveforms button)

  PinSetup();         //Configure GPIO pins
  __enable_irq();     //enable interrupts

  while(1) //Endless loop
  {
    //insert stuff about determining the values of sw1 and sw2 here


    counting1(count,count2,button,led1,led2,led3,led4); //increment counter and display values with LED
    delay(); //0.5 second delay

    if (led1 == 0){
      GPIOC->BSRRH = 0x01;       /*set LED1 to 0*/
    }
    else{
      GPIOC->BSRRL = 0x01;      /*set LED1 to 1*/
    }

    if (led2 == 0){
      GPIOC->BSRRH = 0x02;       /*set LED2 to 0*/
    }
    else{
      GPIOC->BSRRL = 0x02;      /*set LED2 to 1*/
    }

    if (led3 == 0){
      GPIOC->BSRRH = 0x04;       /*set LED3 to 0*/
    }
    else{
      GPIOC->BSRRL = 0x04;      /*set LED3 to 1*/
    }
    if (led4 == 0){
      GPIOC->BSRRH = 0x08;       /*set LED4 to 0*/
    }
    else{
      GPIOC->BSRRL = 0x08;      /*set LED4 to 1*/
    }

    //assinging an on/off value to the corresponding LEDs for LED2
    if (led21 == 0){
      GPIOC->BSRRH = 0x10;       /*set LED1 to 0*/
    }
    else{
      GPIOC->BSRRL = 0x10;      /*set LED1 to 1*/
    }

    if (led22 == 0){
      GPIOC->BSRRH = 0x20;       /*set LED2 to 0*/
    }
    else{
      GPIOC->BSRRL = 0x20;      /*set LED2 to 1*/
    }

    if (led23 == 0){
      GPIOC->BSRRH = 0x40;       /*set LED3 to 0*/
    }
    else{
      GPIOC->BSRRL = 0x40;      /*set LED3 to 1*/
    }

    if (led24 == 0){
      GPIOC->BSRRH = 0x80;       /*set LED4 to 0*/
    }
    else{
      GPIOC->BSRRL = 0x80;      /*set LED4 to 1*/
    }

    }
  }
