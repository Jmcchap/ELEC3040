#include "STM32L1xx.h"

int count = 0;
int num = 0;  //Number pressed on keypad
int led1 = 0; //state of LED1
int led2 = 0; //state of LED2
int led3 = 0; //state of LED3
int led4 = 0; //state of LED4

int Int = 0;

int row1, row2, row3, row4;

/*----------------------------------------------------------*/
/* Pin setup - initialize GPIO pins used in program */
/* PA1 - Switch 1 connected to DIO0 on the EEBoard */
/* PA2 - Switch 2 connected to DIO1 on the EEBoard */
/*----------------------------------------------------------*/

void PinSetup(){
/*Configure PC() as output pins for LEDS*/
RCC->AHBENR     |= 0x04;             /*Enable GPIOC clock*/
GPIOC->MODER    &= (0xFFFFFF00);    /*Clear Pins 0-3 to be set as output*/
GPIOC->MODER    |= (0x00000055);    /*Sets Pins 0-3 in output mode*/
GPIOC->OSPEEDR  &= (0xFFFFFF00);    /*Clear Pins 0-3 for speed setting*/
GPIOC->OSPEEDR  |= (0x000000FF);    /*Set Speed to 40MHz (high speed)*/
GPIOC->PUPDR    &= (0xFFFFFF00);    /*No pull-up, pull-down*/

/*Configure PA() as input pins for S1 and S2*/
RCC->AHBENR     |= 0x01;             /*Enable GPIOA clock*/
GPIOA->MODER    &= (0xFFFFFFC3);    /*Clears Pins 1 and 2 as inputs*/
GPIOA->OSPEEDR  &= (0xFFFFFFC3);    /*Clears Pins 1 and 2 for speed settings*/
GPIOA->OSPEEDR  |= (0x000000FF);    /*Set Speed to 40MHz (high speed)*/
GPIOC->PUPDR    &= (0xFFFFFFC3);    /*No pull-up, pull-down*/
/*GPIOC->PUPDR		|=  (0x00000014);	*/	/*Set S1 and S2 with a pull-up resistor*/

//Configure PB(0-3) as rows on keypad (inputs)
RCC->AHBENR     |= 0x02;             /*Enable GPIOB clock*/
GPIOC->MODER    &= (0xFFFFFF00);    //Clear Pins 0-3 to be set as inputs
GPIOC->OSPEEDR  &= (0xFFFFFF00);    //Clears pins 0-3 for speed settings
GPIOC->OSPEEDR  |= (0x000000FF);    //Set Speed to 40MHz (high speed)
GPIOC->PUPDR    &= (0xFFFFFF00);    //Clear Pins 0-3 for pull up, pull-down settings
GPIOC->PUPDR    |= (0x00000055);    //Set Pins 0-3 as pull up

//Configure PB(4-7) as columns on keypad (outputs)
GPIOC->MODER    &= (0xFFFF00FF);      //Clear pins 4-7 to be set as outputs
GPIOC->MODER    |= (0x00005500);      //Sets pins 4-7 as outputs
GPIOC->OSPEEDR  &= (0xFFFF00FF);      //Clears PB(4-7) for speed settings
GPIOC->OSPEEDR  |= (0x0000FF00);      //Sets speed to 40MHz (high speed)
GPIOC->PUPDR    &= (0xFFFF55FF);      //pull-up

//Setup of PA1 as an interrupt (backup PA0 for interrupt)
SYSCFG->EXTICR[0] &= 0xFFF0;         //clear bits for EXTI0 (Left 0 for PA selected)
SYSCFG->EXTICR[0] &= 0xFF0F;         //clear bits for EXTI1 (Left 0 for PA selected)
EXTI-> RTSR       |= 0x0000;         //Set EXTI0 as rising edge triggered
EXTI-> IMR         = 0x0000;         //Enable EXTIO
EXTI-> PR         |= 0x0000;         //Clear EXTI0 pending status
EXTI-> RTSR       |= 0x0001;         //Set EXTI1 as rising edge triggered
EXTI-> IMR         = 0x0001;         //Enable EXTI1
EXTI-> PR         |= 0x0001;         //Clear EXTI1 pending status
NVIC_ClearPendingIRQ(6);						 //Clear NVIC pending status
NVIC_ClearPendingIRQ(7);						 //Clear NVIC pending status
NVIC_EnableIRQ(6);          					//Enable external interrupt 0
NVIC_EnableIRQ(7);          					//Enable external interrupt 1
}


/*----------------------------------------------------------*/
/* Delay function - 1 second delay */
/*----------------------------------------------------------*/
void delay ()
{
 int a,b;
 for (a=0; a<100; a++) { //outer loop
 for (b=0; b<20000; b++) { //inner loop
 }
 }
}


/*----------------------------------------------------------*/
/* set the states of corresponding LEDs based on a integer from 0 to 9 */
/*----------------------------------------------------------*/
void actLEDs(int n, int l1, int l2, int l3, int l4)
{
  if (n == 0)
  {
    l1 = 0;
    l2 = 0;
    l3 = 0;
    l4 = 0;
  }
  else if (n == 1)
  {
    l1 = 1;
    l2 = 0;
    l3 = 0;
    l4 = 0;
  }
  else if (n == 2)
  {
    l1 = 0;
    l2 = 1;
    l3 = 0;
    l4 = 0;
  }
  else if (n == 3)
  {
    l1 = 1;
    l2 = 1;
    l3 = 0;
    l4 = 0;
  }
  else if (n == 4)
  {
    l1 = 0;
    l2 = 0;
    l3 = 1;
    l4 = 0;
  }
  else if (n == 5)
  {
    l1 = 1;
    l2 = 0;
    l3 = 1;
    l4 = 0;
  }
  else if (n == 6)
  {
    l1 = 0;
    l2 = 1;
    l3 = 1;
    l4 = 0;
  }
  else if (n == 7)
  {
    l1 = 1;
    l2 = 1;
    l3 = 1;
    l4 = 0;
  }
  else if (n == 8)
  {
    l1 = 0;
    l2 = 0;
    l3 = 0;
    l4 = 1;
  }
  else if (n == 9)
  {
    l1 = 1;
    l2 = 0;
    l3 = 0;
    l4 = 1;
  }
  else if (n == 10) //A
  {
    l1 = 0;
    l2 = 1;
    l3 = 0;
    l4 = 1;
  }
  else if (n == 11) //B
  {
    l1 = 1;
    l2 = 1;
    l3 = 0;
    l4 = 1;
  }
  else if (n == 12) //C
  {
    l1 = 0;
    l2 = 0;
    l3 = 1;
    l4 = 1;
  }
  else if (n == 13) //D
  {
    l1 = 1;
    l2 = 0;
    l3 = 1;
    l4 = 1;
  }
  else if (n == 14) //E
  {
    l1 = 0;
    l2 = 1;
    l3 = 1;
    l4 = 1;
  }
  else if (n == 15) //F
  {
    l1 = 1;
    l2 = 1;
    l3 = 1;
    l4 = 1;
  }

  led1 = l1;
  led2 = l2;
  led3 = l3;
  led4 = l4;
}


/*----------------------------------------------------------*/
/* Counting function - reversible decade counter with LED display */
/*----------------------------------------------------------*/
void counting (int n,int l1, int l2, int l3, int l4)
{
  if (n>=9)
    n = 0; //if count=9 roll over to 0
  else
    n++; //increment counter by one

  if (Int == 0)
    actLEDs(n, l1, l2, l3, l4); //set states for LEDs
  else
    Int--;
  count = n;
}

void EXTI0_IRQHandler ()
{
  //insert smart stuff about checking rows
  /*
  According to what he was saying in lecture a row will hit logic zero when we push a button, therefore triggering the interrupt
  I think we can make the interrupt check which column activated the row by using a if-el*/

/*Scanning algorithm, column 1*/
  GPIOB-> BSRRH = 0x10;            //set column1 to 0
  if (row1 == 0){
        num = 1;}
    else if (row2 == 0){
        num = 4;}
    else if (row3 == 0){
        num = 7;}
    else if (row4 == 0){
        num = 14;}          //E
  GPIOB-> BSRRL = 0x10;             //return column1 to 1

/*Scanning algorithm, column 2*/
    GPIOB-> BSRRH = 0x20;            //set column2 to 0
    if (row1 == 0){
          num = 2;}
      else if (row2 == 0){
          num = 5;}
      else if (row3 == 0){
          num = 8;}
      else if (row4 == 0){
          num = 0;}
    GPIOB-> BSRRL = 0x20;             //return column2 to 1

/*Scanning algorithm, column 3*/
    GPIOB-> BSRRH = 0x40;            //set column3 to 0
      if (row1 == 0){
            num = 3;}
        else if (row2 == 0){
            num = 6;}
        else if (row3 == 0){
            num = 9;}
        else if (row4 == 0){
            num = 15;}          //F
      GPIOB-> BSRRL = 0x40;             //return column3 to 1

/*Scanning algorithm, column 4*/
          GPIOB-> BSRRH = 0x80;            //set column4 to 0
          if (row1 == 0){
                num = 10;}          //A
            else if (row2 == 0){
                num = 11;}          //B
            else if (row3 == 0){
                num = 12;}          //C
            else if (row4 == 0){
                num = 13;}          //D
          GPIOB-> BSRRL = 0x80;             //return column4 to 1
  
  actLEDs(num,led1,led2,led3,led4);
  Int = 5;
  
  NVIC_ClearPendingIRQ(6);								 //Clear NVIC pending status
  EXTI-> PR         |= 0x0000;         //Clear EXTI1 pending status
}


/*----------------------------------------------------------*/
/* Main program */
/*----------------------------------------------------------*/
int main(void)
{
  PinSetup();         //Configure GPIO pins
  __enable_irq();     //enable interrupts



  while(1) //Endless loop
  {

    row1= GPIOB->IDR & 0x00;    //PB(0) aka row1
    row2= GPIOB->IDR & 0x01;    //PB(1) aka row2
    row3= GPIOB->IDR & 0x02;    //PB(2) aka row3
    row4= GPIOB->IDR & 0x04;    //PB(3) aka row4
		
   // col1= GPIOB->IDR & 0x08;    //PB(0) aka row1
 //   col2= GPIOB->IDR & 0x10;    //PB(1) aka row2
  //  col3= GPIOB->IDR & 0x20;    //PB(2) aka row3
  //  col4= GPIOB->IDR & 0x40;    //PB(3) aka row4

      counting(count,led1,led2,led3,led4); //increment counter and display values with LED
      delay(); //0.5 second delay
        if (led1 == 0){
            GPIOC->BSRRH = 0x01;       /*set LED1 to 0*/
      }
        else{
            GPIOC->BSRRL = 0x01;      /*set LED1 to 1*/
      }

        if (led2 == 0){
            GPIOC->BSRRH = 0x02;       /*set LED2 to 0*/
      }
        else{
            GPIOC->BSRRL = 0x02;      /*set LED2 to 1*/
      }

        if (led3 == 0){
            GPIOC->BSRRH = 0x04;       /*set LED3 to 0*/
      }
        else{
            GPIOC->BSRRL = 0x04;      /*set LED3 to 1*/
      }
        if (led4 == 0){
            GPIOC->BSRRH = 0x08;       /*set LED4 to 0*/
      }
        else{
            GPIOC->BSRRL = 0x08;      /*set LED4 to 1*/
      }

  }
}
